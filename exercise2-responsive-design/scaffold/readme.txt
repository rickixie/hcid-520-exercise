Ricki Xie: rickixie
Kim Le: kimnle

*index-web.html is used for the stylized desktop layout (mobile designs also work with this file)
*index.html is the original html file used for the mobile layouts

Although flexbox was a bit confusing at first, we preferred using flexbox for our layouts because we thought it was easier to position elements on the page. For example, we liked using flexbox properties such as flex-grow to create a ratio of how much space each element occupied, rather than having to predict more exact pixels of the margins. A strength of using flexbox is that it’s a lot more responsive across different devices. As mentioned previously, flexbox automatically snaps to the grid of the website, reducing the need to spend time calculating margins. However, flexbox does not currently seem to be a popular approach to layouts. We learned from another classmate that many developers are hesitant to use flexbox because it is constantly changing. An additional weakness is that if you want pixel precision, it’s harder to determine the position of an element. In comparison, a strength of using float is that you can place items more precisely on a page, if you know exactly where you want the element on the layout. On the opposite side of the spectrum, this can also be a weakness, because it may require more effort to figure out the exact location. Additionally, float layouts require relatively more complicated codes to achieve the same effect when a flexbox layout can provide in several lines of code.

For this assignment, we found that it was helpful to use the inspect element on the webpage to try out different selectors and discover corresponding parts of the code and website.  Through trial and error, we started to get the hang of where to apply different selectors. There wasn’t necessarily an “easy” part of the assignment for us, but with time, we became more familiar with our code. Having had practice with creating the mobile layouts, the desktop layout was a bit easier to approach, and we knew we wanted to utilize flexbox. We struggled a bit with floats when it came to aligning elements to a certain area, because we had to determine width values. Another issue was that after we styled our layout, it didn’t always translate well into the mobile version, so we had to keep iterating on our mobile and web design.  We had moments where we became frustrated because we wanted to change certain parts of the HTML file in order to achieve a stylistic change, however, we were limited to editing the CSS.

For our desktop design, we decided to use sans-serif fonts because it gave a cleaner look to our intended minimalistic design. We also thought that this would translate well into the smaller screens of a mobile device. We were inspired to use these colors from a layout that we liked from a bootstrap layout website. Originally, we were planning on having four different colors for the top part of our design. We quickly realized, however, that this made the webpage too chaotic to look at. We decided to settle on a navy and teal color because the colors weren’t too jarring and offered enough contrast to be viewed in any brightness level. We decided to use a one column layout because it is often seen with online portfolios. Also, we thought that if we are displaying project images with descriptive text, multiple columns would become too crowded. We created a separate index file for our desktop design and rearranged the placement of the navigation to the top of the page, because it seemed to be the most intuitive area to have a navigation bar. To add a bit more flair to our design, we added a hover that changes colors, to prompt the user that they have scrolled over a link. We also added additional css and html markups for description text to create typographic hierarchy.
This exercise was helpful in understanding the importance of considering responsive design in addition to the aesthetics of the webpage. It wasn’t as simple as we expected. For example, what may have looked good on the desktop design was not suitable for a smaller screen. Overall, it was an eye-opening exercise.

Resources:
Images courtesy of: unsplash.com
Bootstrap layout inspiration: http://blackrockdigital.github.io/startbootstrap-freelancer/
CSS Tricks Flex-box: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
CSS Tricks Float: https://css-tricks.com/all-about-floats/


